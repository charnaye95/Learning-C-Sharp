Code Academy | C#

What is C#?
- this programming language can be used to make interactive websites, mobile apps, video games, augmented reality (AR), virtual reality (VR), desktop applications and back-end services --just to name a few.
- Learning C# (pronounced “cee sharp”) can make you a better programmer:
    In C# you can define the type of each data in a program. Assigning a type essentially tells a computer what operations can and cannot be performed on a piece of data. This style of coding helps programmers avoid a large class of errors that are common to Ruby and JavaScript.

    In C#, programs are built—by defining objects that interact with each other, which makes code reusable and easy to manage.

Running C#
There are two panels: a text editor containing C# code and the console (or terminal), that shows output. 
    
    Console.WriteLine() is a command that prints text to a console. Whatever is in between the parentheses will be printed to the console!
    Example: Console.WriteLine("Hello World!"); would print "Hello World!"

    Console.ReadLine() captures text that a user types into the console. In JavaScript that's prompt()

Data Types and Variables
Data types tell us a few things about a piece of data, like:
    - How it can be stored
    - What operations we can perform with it
    - Different methods it can be used with

C# is known as a strongly-typed language—it requires that the programmer specify the data type of every value and expression. While it means writing more code, using types has long term benefits like built-in documentation and increased readability.

    - int - whole numbers, like: 1, -56, 948
    - double - decimal numbers, like: 239.43909, -660.01
    - char - single characters, like: “a”, “&”, “£”
    - string - string of characters, like: “dog”, “hello world”
    - bool - boolean values, like: true or false

Every time we declare a variable, we have to specify what kind of data type that variable is going to hold.

There are two ways we can assign variables. 
    We can do it on two lines:
    // Declare an integer
    int myAge;
    myAge = 32;

    Or, we can be more concise and just do it on one:
    // Declare a string
    string countryName = "Netherlands";

    In each case, we first write the data type, then the variable name, then use the equals sign = to assign the variable a value.

Once we’ve defined a variable, we can use them throughout our program.

    Example:     
        // Create Variables
        string name = "Shadow";
        string breed = "Golden Retriever";
        int age = 5;
        double weight = 65.22;
        bool spayed = true;

        // Print variables to the console
        Console.WriteLine(name);
        Console.WriteLine(breed);
        Console.WriteLine(age);
        Console.WriteLine(weight);
        Console.WriteLine(spayed);

Handling Errors

So, what happens if you forget to specify a data type for your variable?:
    randomData = "asdf jskdf";
    Console.WriteLine(randomData);

C# will give an error because it doesn’t want you to have random data being used in your application. The error will look something like this:

   "The name 'randomData' does not exist in the current context [CS0103:]"

If you use the wrong type definition, like an int when it’s supposed to be a double:
    int score = 45.39;

You might see an error like this:

   "Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?)"

Styling
    For variables, use camelCase styling, and they should only contain underscores, letters, and digits. Example: string firstAndLastInitial = "CG"

Converting Data Types
There could be some circumstances/times where we want to change the type of data a variable is storing.
This strategy is known as data type conversion.
    Example: IMPLICIT CONVERSION
        int myInt = 3;
        // Turn it into a double
        double myDouble = myInt;


C# checks to make sure that when we convert data types from one to another that we’re not losing any data, because that could cause problems in our code.

Because of that, there are a couple different ways to do data type conversion:

    - implicit conversion: happens automatically if no data will be lost in the conversion. That’s why it’s possible to convert an int (which can hold less data) to a double (which can hold more), but not the other way around.
    - explicit conversion: requires a cast operator to convert a data type into another one. So if we do want to convert a double to an int, we could use the operator (int).

    EXAMPLE: EXPLICIT CONVERSION
        double myDouble = 3.2;
    
        // Round myDouble to the nearest whole number
        int myInt = (int)myDouble;

It’s also possible to convert data types using built-in methods. For most data types, there is a Convert.ToX() method, like Convert.ToString() and Convert.ToDouble().

Numerical Data Types
    Int: a whole integer value
        Ex: int favNumber = 23;
    
All of the types below are decimals.

    Double: more precise than a float, but faster to process than a decimal. They have up to 15-16 digits
        Ex: double gradePointAvg = 3.8;
    
    Float: It is used mostly in graphic libraries because very high demands for processing powers, also used situations that can endure rounding errors. They have up to 7 digits.
    
    Decimal: In case of financial applications it is better to use Decimal types because it gives you a high level of accuracy and easy to avoid rounding errors. They have up to 28-29 significant digits
        Ex: decimal paycheck = 1000.73m;
        Don’t forget the m character after the number! This character tells C# that we’re defining a decimal and not a double.

Accuracy:
    - Float is less accurate than Double and Decimal.
    - Double is more accurate than Float but less accurate than Decimal.
    - Decimal is more accurate than Float and Double.
